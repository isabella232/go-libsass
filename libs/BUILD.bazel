load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

# NOTE: This is structured as a single go_library target intentionally.
# Breaking the C/C++ code into separate targets causes downstream issues because
# cc_library sources are excluded from `go_path` rule output.
# See https://github.com/bazelbuild/rules_go/issues/1872
#
# This will no longer be necessary once the go/packages API supports Bazel workspaces.
# At that time, code generation tools will not need to use `go_path`.

# keep
go_library(
    name = "go_default_library",
    srcs = [
        "docs.go",
        "encoding.go",
        "export.go",
        "func.go",
        "header.go",
        "helpers.go",
        "importer.go",
        "safemap.go",
        "sass_number.go",
        "toscss.go",
        "wrap.go",
        "wrap_main.go",
    ] + glob([
        "**/*.c",
        "**/*.cpp",
        "**/*.h",
        "**/*.hpp",
    ]),
    cgo = True,
    clinkopts = ["-lstdc++ -lm -ldl"],
    copts = ["-g -O2 -fPIC -Ilibs/include"],
    cppopts = ["-Ilibs/include"],
    importpath = "github.com/yext/go-libsass/libs",
    visibility = ["//visibility:public"],
)

go_test(
    name = "go_default_test",
    srcs = ["sass_number_test.go"],
    embed = [":go_default_library"],
)
